{"version":3,"sources":["component/gameBoard/index.js","component/gameRecord/index.js","App.js","serviceWorker.js","index.js"],"names":["GameBoard","props","renderer","nextProps","nextState","nextContext","className","ref","addEventListener","event","onClick","offsetX","offsetY","onCanvasReady","Component","GameRecord","state","record","this","game","recordList","setState","_scrollListToBottom","list","scrollTop","offsetHeight","map","action","key","toString","App","ChineseChess","controller","Controller","ChineseChessRenderer","chessBoardWidth","chessBoardHeight","chessBoardStart","chessBoardTop","chessmanWidth","chessmanHeight","rowGap","columnGap","imageUrlMap","imgSrc","imageConstructor","Image","_assistance","_regret","_reset","setTimeout","autoMove","render","regret","reset","man","com","github","kchess","algorithm","Chessman","img","Map","set","红兵","require","红车","红士","红炮","红马","红象","红将","黑卒","黑车","黑士","黑炮","黑马","黑象","黑帅","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","console","log","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c83b073c.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport './index.css'\n\nexport default class GameBoard extends Component {\n\n  constructor(props) {\n    super(props);\n    this.renderer = props.renderer\n  }\n\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    return false\n  }\n\n  render() {\n    return (<div className=\"GameBoard\">\n      <canvas ref={(ref) => {\n        ref.addEventListener('click', (event) => {\n          this.renderer.onClick(event.offsetX, event.offsetY)\n        })\n        this.renderer.onCanvasReady(ref)\n      }}/>\n    </div>)\n  }\n}\n","import React, {Component} from \"react\";\nimport './index.css'\n\nexport default class GameRecord extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      record: []\n    }\n  }\n\n  componentDidMount() {\n    this.props.game.addEventListener('record', (recordList) => {\n      this.setState({\n        record: recordList\n      }, this._scrollListToBottom)\n    })\n  }\n\n  _scrollListToBottom() {\n    this.list.scrollTop = this.list.offsetHeight\n  }\n\n  render() {\n    return (<div className=\"RecordPanel\">\n      <text>记录(Record)</text>\n      <ul ref={(ref) => this.list = ref}>\n        {this.state.record.map((action) =>\n          <li key={action.toString()}>{action.toString()}</li>\n        )}\n      </ul>\n    </div>)\n  }\n}\n","import React, {Component} from 'react';\nimport './App.css';\nimport ChineseChess from \"kchess-algorithm-chinesechess\";\nimport {ChineseChessRenderer} from \"kchess-react-shared\";\nimport GameBoard from \"./component/gameBoard\";\nimport GameRecord from \"./component/gameRecord\";\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.game = new ChineseChess.ChineseChess()\n    this.controller = new ChineseChess.Controller(this.game)\n    this.renderer = new ChineseChessRenderer({\n      chessBoardWidth: 650,\n      chessBoardHeight: 806,\n      chessBoardStart: 16,\n      chessBoardTop: 40,\n      chessmanWidth: 60,\n      chessmanHeight: 60,\n      rowGap: 72,\n      columnGap: 70,\n      imageUrlMap: App.imgSrc,\n      game: this.game,\n      controller: this.controller,\n      imageConstructor: Image\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <GameBoard renderer={this.renderer}/>\n\n        <div className=\"CtrlPanel\">\n          <GameRecord game={this.game}/>\n          <button onClick={() => this._assistance()}>帮你走 (ASSISTANCE)</button>\n          <button onClick={() => this._regret()}>悔棋 (REGRET)</button>\n          <button onClick={() => this._reset()}>重置 (RESET)</button>\n        </div>\n      </div>\n    );\n  }\n\n  _assistance() {\n    setTimeout(() => {\n      this.game.autoMove()\n      this.renderer.render()\n      setTimeout(() => {\n        this.game.autoMove()\n        this.renderer.render()\n      }, 500)\n    }, 500)\n  }\n\n  _regret() {\n    this.game.regret()\n    this.renderer.render()\n  }\n\n  _reset() {\n    this.game.reset()\n    this.renderer.render()\n  }\n\n  static imgSrc = (() => {\n    //fixme:shortcut\n    const man = ChineseChess.com.github.kchess.algorithm.Chessman\n    const img = new Map()\n    img.set(man.红兵, require('kchess-react-shared/img/r_z.png'))\n    img.set(man.红车, require('kchess-react-shared/img/r_c.png'))\n    img.set(man.红士, require('kchess-react-shared/img/r_s.png'))\n    img.set(man.红炮, require('kchess-react-shared/img/r_p.png'))\n    img.set(man.红马, require('kchess-react-shared/img/r_m.png'))\n    img.set(man.红象, require('kchess-react-shared/img/r_x.png'))\n    img.set(man.红将, require('kchess-react-shared/img/r_j.png'))\n\n    img.set(man.黑卒, require('kchess-react-shared/img/b_z.png'))\n    img.set(man.黑车, require('kchess-react-shared/img/b_c.png'))\n    img.set(man.黑士, require('kchess-react-shared/img/b_s.png'))\n    img.set(man.黑炮, require('kchess-react-shared/img/b_p.png'))\n    img.set(man.黑马, require('kchess-react-shared/img/b_m.png'))\n    img.set(man.黑象, require('kchess-react-shared/img/b_x.png'))\n    img.set(man.黑帅, require('kchess-react-shared/img/b_j.png'))\n\n    img.set(\"targetRed\", require('kchess-react-shared/img/r_box.png'))\n    img.set(\"targetBlack\", require('kchess-react-shared/img/b_box.png'))\n    return img\n  })()\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}